import Stock from "../models/Stock.js";
import Food from "../models/Food.js";

// üìå L·∫•y to√†n b·ªô stocks k√®m food + category
export const getAllStocks = async (req, res) => {
  try {
    const stocks = await Stock.find()
      .populate({
        path: "foodId",
        select: "name description price image categoryId",
        populate: { path: "categoryId", select: "name" }
      });

    const result = stocks.map(stock => ({
      _id: stock._id,
      quantity: stock.quantity,
      updatedAt: stock.updatedAt,
      foodInfo: stock.foodId,
      categoryInfo: stock.foodId?.categoryId
    }));

    res.json({ success: true, stocks: result });
  } catch (err) {
    console.error("‚ùå getAllStocks error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
};

// üìå T·∫°o m·ªõi Food + Stock (c√≥ upload ·∫£nh)
export const createStock = async (req, res) => {
  try {
    const { name, description, price, categoryId, quantity } = req.body;
    const image = req.file ? req.file.filename : null;

    // t·∫°o s·∫£n ph·∫©m m·ªõi
    const food = await Food.create({
      name,
      description,
      price: Number(price),
      categoryId,
      image,
    });

    // t·∫°o kho cho s·∫£n ph·∫©m ƒë√≥
    const stock = await Stock.create({
      foodId: food._id,
      quantity: Number(quantity) || 0,
    });

    res.json({ success: true, food, stock });
  } catch (err) {
    console.error("‚ùå createStock error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
};

// üìå Update Food (c√≥ th·ªÉ thay ƒë·ªïi ·∫£nh/category n·∫øu upload m·ªõi)
export const updateStock = async (req, res) => {
  try {
    const { foodId } = req.params;
    let updateData = { ...req.body };

    if (req.file) {
      updateData.image = req.file.filename;
    }

    const food = await Food.findByIdAndUpdate(foodId, updateData, { new: true })
      .populate("categoryId", "name");

    if (!food) {
      return res.status(404).json({ success: false, message: "Food kh√¥ng t·ªìn t·∫°i" });
    }

    res.json({ success: true, food });
  } catch (err) {
    console.error("‚ùå updateStock error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
};

// üìå Delete Stock + Xo√° lu√¥n Food t∆∞∆°ng ·ª©ng
export const deleteStock = async (req, res) => {
  try {
    const stock = await Stock.findById(req.params.stockId);

    if (!stock) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y stock" });
    }

    // Xo√° Food li√™n quan
    await Food.findByIdAndDelete(stock.foodId);

    // Xo√° Stock
    await Stock.findByIdAndDelete(req.params.stockId);

    res.json({ success: true, message: "ƒê√£ xo√° Food + Stock" });
  } catch (err) {
    console.error("‚ùå deleteStock error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
};

// üìå Thay ƒë·ªïi s·ªë l∆∞·ª£ng stock
export const changeQuantity = async (req, res) => {
  try {
    const { foodId, qty } = req.body;
    const stock = await Stock.findOne({ foodId });

    if (!stock) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y stock" });
    }

    stock.quantity += Number(qty) || 0;
    if (stock.quantity < 0) stock.quantity = 0;
    await stock.save();

    res.json({ success: true, stock });
  } catch (err) {
    console.error("‚ùå changeQuantity error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
};